/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface ShopInterface extends utils.Interface {
  functions: {
    "getItemCount()": FunctionFragment;
    "getItems()": FunctionFragment;
    "isEntity(uint256)": FunctionFragment;
    "itemList(uint256)": FunctionFragment;
    "itemStructs(uint256)": FunctionFragment;
    "list(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "purchase(uint256,uint256)": FunctionFragment;
    "remove(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setTreasuryContract(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "update(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getItemCount"
      | "getItems"
      | "isEntity"
      | "itemList"
      | "itemStructs"
      | "list"
      | "owner"
      | "purchase"
      | "remove"
      | "renounceOwnership"
      | "setTreasuryContract"
      | "transferOwnership"
      | "update"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getItemCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getItems", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isEntity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "itemList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "itemStructs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "list",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchase",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remove",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getItemCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getItems", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isEntity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "itemList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "itemStructs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;

  events: {
    "ItemAdded(uint256,uint256,uint256)": EventFragment;
    "ItemPurchased(address,uint256,uint256,uint256)": EventFragment;
    "ItemRemoved(uint256,uint256)": EventFragment;
    "ItemUpdated(uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ItemAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface ItemAddedEventObject {
  itemId: BigNumber;
  price: BigNumber;
  when: BigNumber;
}
export type ItemAddedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  ItemAddedEventObject
>;

export type ItemAddedEventFilter = TypedEventFilter<ItemAddedEvent>;

export interface ItemPurchasedEventObject {
  who: string;
  itemId: BigNumber;
  amount: BigNumber;
  when: BigNumber;
}
export type ItemPurchasedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  ItemPurchasedEventObject
>;

export type ItemPurchasedEventFilter = TypedEventFilter<ItemPurchasedEvent>;

export interface ItemRemovedEventObject {
  itemId: BigNumber;
  when: BigNumber;
}
export type ItemRemovedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ItemRemovedEventObject
>;

export type ItemRemovedEventFilter = TypedEventFilter<ItemRemovedEvent>;

export interface ItemUpdatedEventObject {
  itemId: BigNumber;
  price: BigNumber;
  when: BigNumber;
}
export type ItemUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  ItemUpdatedEventObject
>;

export type ItemUpdatedEventFilter = TypedEventFilter<ItemUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Shop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ShopInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getItemCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { itemCount: BigNumber }>;

    getItems(overrides?: CallOverrides): Promise<[BigNumber[], BigNumber[]]>;

    isEntity(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    itemList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    itemStructs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { price: BigNumber; listPointer: BigNumber }
    >;

    list(
      _itemId: BigNumberish,
      _itemPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    purchase(
      _itemId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    remove(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasuryContract(
      _treasuryContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    update(
      _itemId: BigNumberish,
      _itemPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getItemCount(overrides?: CallOverrides): Promise<BigNumber>;

  getItems(overrides?: CallOverrides): Promise<[BigNumber[], BigNumber[]]>;

  isEntity(_itemId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  itemList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  itemStructs(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { price: BigNumber; listPointer: BigNumber }
  >;

  list(
    _itemId: BigNumberish,
    _itemPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  purchase(
    _itemId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  remove(
    _itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasuryContract(
    _treasuryContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  update(
    _itemId: BigNumberish,
    _itemPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getItemCount(overrides?: CallOverrides): Promise<BigNumber>;

    getItems(overrides?: CallOverrides): Promise<[BigNumber[], BigNumber[]]>;

    isEntity(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    itemList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    itemStructs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { price: BigNumber; listPointer: BigNumber }
    >;

    list(
      _itemId: BigNumberish,
      _itemPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    purchase(
      _itemId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    remove(_itemId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setTreasuryContract(
      _treasuryContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    update(
      _itemId: BigNumberish,
      _itemPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ItemAdded(uint256,uint256,uint256)"(
      itemId?: null,
      price?: null,
      when?: null
    ): ItemAddedEventFilter;
    ItemAdded(itemId?: null, price?: null, when?: null): ItemAddedEventFilter;

    "ItemPurchased(address,uint256,uint256,uint256)"(
      who?: null,
      itemId?: null,
      amount?: null,
      when?: null
    ): ItemPurchasedEventFilter;
    ItemPurchased(
      who?: null,
      itemId?: null,
      amount?: null,
      when?: null
    ): ItemPurchasedEventFilter;

    "ItemRemoved(uint256,uint256)"(
      itemId?: null,
      when?: null
    ): ItemRemovedEventFilter;
    ItemRemoved(itemId?: null, when?: null): ItemRemovedEventFilter;

    "ItemUpdated(uint256,uint256,uint256)"(
      itemId?: null,
      price?: null,
      when?: null
    ): ItemUpdatedEventFilter;
    ItemUpdated(
      itemId?: null,
      price?: null,
      when?: null
    ): ItemUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    getItemCount(overrides?: CallOverrides): Promise<BigNumber>;

    getItems(overrides?: CallOverrides): Promise<BigNumber>;

    isEntity(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    itemList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    itemStructs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    list(
      _itemId: BigNumberish,
      _itemPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    purchase(
      _itemId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    remove(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasuryContract(
      _treasuryContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    update(
      _itemId: BigNumberish,
      _itemPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getItemCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isEntity(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    itemList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    itemStructs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    list(
      _itemId: BigNumberish,
      _itemPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchase(
      _itemId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    remove(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryContract(
      _treasuryContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    update(
      _itemId: BigNumberish,
      _itemPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
