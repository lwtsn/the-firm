/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface BaseSchemeInterface extends utils.Interface {
  functions: {
    "complete(address)": FunctionFragment;
    "duration()": FunctionFragment;
    "getScheme()": FunctionFragment;
    "start(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "complete" | "duration" | "getScheme" | "start"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "complete", values: [string]): string;
  encodeFunctionData(functionFragment: "duration", values?: undefined): string;
  encodeFunctionData(functionFragment: "getScheme", values?: undefined): string;
  encodeFunctionData(functionFragment: "start", values: [string]): string;

  decodeFunctionResult(functionFragment: "complete", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "duration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getScheme", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;

  events: {
    "SchemeCompleted(string,address,uint256)": EventFragment;
    "SchemeStarted(string,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SchemeCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SchemeStarted"): EventFragment;
}

export interface SchemeCompletedEventObject {
  name: string;
  who: string;
  when: BigNumber;
}
export type SchemeCompletedEvent = TypedEvent<
  [string, string, BigNumber],
  SchemeCompletedEventObject
>;

export type SchemeCompletedEventFilter = TypedEventFilter<SchemeCompletedEvent>;

export interface SchemeStartedEventObject {
  name: string;
  who: string;
  when: BigNumber;
}
export type SchemeStartedEvent = TypedEvent<
  [string, string, BigNumber],
  SchemeStartedEventObject
>;

export type SchemeStartedEventFilter = TypedEventFilter<SchemeStartedEvent>;

export interface BaseScheme extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BaseSchemeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    complete(
      _who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    duration(overrides?: CallOverrides): Promise<[BigNumber]>;

    getScheme(
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { _duration: BigNumber; _name: string }>;

    start(
      _who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  complete(
    _who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  duration(overrides?: CallOverrides): Promise<BigNumber>;

  getScheme(
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { _duration: BigNumber; _name: string }>;

  start(
    _who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    complete(_who: string, overrides?: CallOverrides): Promise<void>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    getScheme(
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { _duration: BigNumber; _name: string }>;

    start(_who: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "SchemeCompleted(string,address,uint256)"(
      name?: null,
      who?: null,
      when?: null
    ): SchemeCompletedEventFilter;
    SchemeCompleted(
      name?: null,
      who?: null,
      when?: null
    ): SchemeCompletedEventFilter;

    "SchemeStarted(string,address,uint256)"(
      name?: null,
      who?: null,
      when?: null
    ): SchemeStartedEventFilter;
    SchemeStarted(
      name?: null,
      who?: null,
      when?: null
    ): SchemeStartedEventFilter;
  };

  estimateGas: {
    complete(
      _who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    getScheme(overrides?: CallOverrides): Promise<BigNumber>;

    start(
      _who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    complete(
      _who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    duration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getScheme(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    start(
      _who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
