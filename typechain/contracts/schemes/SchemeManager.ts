/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface SchemeManagerInterface extends utils.Interface {
  functions: {
    "addScheme(address)": FunctionFragment;
    "completeScheme()": FunctionFragment;
    "getOngoingScheme(address)": FunctionFragment;
    "listSchemes()": FunctionFragment;
    "nextSchemeId()": FunctionFragment;
    "schemes(uint256)": FunctionFragment;
    "setCashContract(address)": FunctionFragment;
    "setPlayerStats(address)": FunctionFragment;
    "setRandomNumberGenerator(address)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "skipScheme()": FunctionFragment;
    "startScheme(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addScheme"
      | "completeScheme"
      | "getOngoingScheme"
      | "listSchemes"
      | "nextSchemeId"
      | "schemes"
      | "setCashContract"
      | "setPlayerStats"
      | "setRandomNumberGenerator"
      | "setTreasury"
      | "skipScheme"
      | "startScheme"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addScheme", values: [string]): string;
  encodeFunctionData(
    functionFragment: "completeScheme",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOngoingScheme",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "listSchemes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextSchemeId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "schemes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCashContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlayerStats",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRandomNumberGenerator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "skipScheme",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startScheme",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addScheme", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeScheme",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOngoingScheme",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listSchemes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextSchemeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "schemes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCashContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlayerStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRandomNumberGenerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "skipScheme", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startScheme",
    data: BytesLike
  ): Result;

  events: {
    "SchemeAdded(address,uint256,uint256)": EventFragment;
    "SchemeStarted(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SchemeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SchemeStarted"): EventFragment;
}

export interface SchemeAddedEventObject {
  schemeAddress: string;
  id: BigNumber;
  when: BigNumber;
}
export type SchemeAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SchemeAddedEventObject
>;

export type SchemeAddedEventFilter = TypedEventFilter<SchemeAddedEvent>;

export interface SchemeStartedEventObject {
  schemeAddress: string;
  who: string;
  when: BigNumber;
}
export type SchemeStartedEvent = TypedEvent<
  [string, string, BigNumber],
  SchemeStartedEventObject
>;

export type SchemeStartedEventFilter = TypedEventFilter<SchemeStartedEvent>;

export interface SchemeManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SchemeManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addScheme(
      _schemeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeScheme(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOngoingScheme(
      _who: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, BigNumber, BigNumber] & {
        _isOngoing: boolean;
        _schemeId: BigNumber;
        _schemeAddress: string;
        _timeStarted: BigNumber;
        _timeCompleting: BigNumber;
      }
    >;

    listSchemes(
      overrides?: CallOverrides
    ): Promise<
      [boolean[], string[]] & { _schemes: boolean[]; _schemeAddress: string[] }
    >;

    nextSchemeId(overrides?: CallOverrides): Promise<[BigNumber]>;

    schemes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { schemeAddress: string; isScheme: boolean }
    >;

    setCashContract(
      _cashContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlayerStats(
      _playerStatsAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRandomNumberGenerator(
      _randomNumberGenerator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    skipScheme(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startScheme(
      _schemeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addScheme(
    _schemeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeScheme(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOngoingScheme(
    _who: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, string, BigNumber, BigNumber] & {
      _isOngoing: boolean;
      _schemeId: BigNumber;
      _schemeAddress: string;
      _timeStarted: BigNumber;
      _timeCompleting: BigNumber;
    }
  >;

  listSchemes(
    overrides?: CallOverrides
  ): Promise<
    [boolean[], string[]] & { _schemes: boolean[]; _schemeAddress: string[] }
  >;

  nextSchemeId(overrides?: CallOverrides): Promise<BigNumber>;

  schemes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { schemeAddress: string; isScheme: boolean }>;

  setCashContract(
    _cashContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlayerStats(
    _playerStatsAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRandomNumberGenerator(
    _randomNumberGenerator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasuryAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  skipScheme(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startScheme(
    _schemeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addScheme(_schemeAddress: string, overrides?: CallOverrides): Promise<void>;

    completeScheme(overrides?: CallOverrides): Promise<void>;

    getOngoingScheme(
      _who: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, BigNumber, BigNumber] & {
        _isOngoing: boolean;
        _schemeId: BigNumber;
        _schemeAddress: string;
        _timeStarted: BigNumber;
        _timeCompleting: BigNumber;
      }
    >;

    listSchemes(
      overrides?: CallOverrides
    ): Promise<
      [boolean[], string[]] & { _schemes: boolean[]; _schemeAddress: string[] }
    >;

    nextSchemeId(overrides?: CallOverrides): Promise<BigNumber>;

    schemes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { schemeAddress: string; isScheme: boolean }
    >;

    setCashContract(
      _cashContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlayerStats(
      _playerStatsAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRandomNumberGenerator(
      _randomNumberGenerator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(
      _treasuryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    skipScheme(overrides?: CallOverrides): Promise<void>;

    startScheme(
      _schemeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SchemeAdded(address,uint256,uint256)"(
      schemeAddress?: null,
      id?: null,
      when?: null
    ): SchemeAddedEventFilter;
    SchemeAdded(
      schemeAddress?: null,
      id?: null,
      when?: null
    ): SchemeAddedEventFilter;

    "SchemeStarted(address,address,uint256)"(
      schemeAddress?: null,
      who?: null,
      when?: null
    ): SchemeStartedEventFilter;
    SchemeStarted(
      schemeAddress?: null,
      who?: null,
      when?: null
    ): SchemeStartedEventFilter;
  };

  estimateGas: {
    addScheme(
      _schemeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeScheme(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOngoingScheme(
      _who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listSchemes(overrides?: CallOverrides): Promise<BigNumber>;

    nextSchemeId(overrides?: CallOverrides): Promise<BigNumber>;

    schemes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setCashContract(
      _cashContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlayerStats(
      _playerStatsAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRandomNumberGenerator(
      _randomNumberGenerator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasury(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    skipScheme(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startScheme(
      _schemeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addScheme(
      _schemeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeScheme(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOngoingScheme(
      _who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listSchemes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextSchemeId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    schemes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCashContract(
      _cashContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlayerStats(
      _playerStatsAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRandomNumberGenerator(
      _randomNumberGenerator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    skipScheme(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startScheme(
      _schemeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
