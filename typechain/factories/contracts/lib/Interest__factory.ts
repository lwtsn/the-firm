/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Interest,
  InterestInterface,
} from "../../../contracts/lib/Interest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_rateWad",
        type: "uint256",
      },
    ],
    name: "yearlyRateToRay",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610273806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063060614cb14610030575b600080fd5b61004361003e3660046101b5565b610055565b60405190815260200160405180910390f35b600061008e61006b670de0b6b3a7640000610094565b61008961007785610094565b6100846301e133806100a4565b6100bc565b6100f4565b92915050565b600061008e82633b9aca0061014e565b600061008e826b033b2e3c9fd0803ce800000061014e565b6000816100e36100d8856b033b2e3c9fd0803ce800000061014e565b6100896002866101e4565b6100ed91906101e4565b9392505050565b6000826101018382610206565b915081101561008e5760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b60448201526064015b60405180910390fd5b600081158061017257508282610164818361021e565b925061017090836101e4565b145b61008e5760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b6044820152606401610145565b6000602082840312156101c757600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b60008261020157634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115610219576102196101ce565b500190565b6000816000190483118215151615610238576102386101ce565b50029056fea2646970667358221220a56342558f8e054358adf4544397e73287c670ac9ce2d4b7f394adcfa338381964736f6c63430008090033";

type InterestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: InterestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Interest__factory extends ContractFactory {
  constructor(...args: InterestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Interest> {
    return super.deploy(overrides || {}) as Promise<Interest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Interest {
    return super.attach(address) as Interest;
  }
  override connect(signer: Signer): Interest__factory {
    return super.connect(signer) as Interest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): InterestInterface {
    return new utils.Interface(_abi) as InterestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Interest {
    return new Contract(address, _abi, signerOrProvider) as Interest;
  }
}
