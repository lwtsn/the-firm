/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SchemeManager,
  SchemeManagerInterface,
} from "../../../contracts/schemes/SchemeManager";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "schemeAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "when",
        type: "uint256",
      },
    ],
    name: "SchemeAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "schemeAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "who",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "when",
        type: "uint256",
      },
    ],
    name: "SchemeStarted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_schemeAddress",
        type: "address",
      },
    ],
    name: "addScheme",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "completeScheme",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_who",
        type: "address",
      },
    ],
    name: "getOngoingScheme",
    outputs: [
      {
        internalType: "bool",
        name: "_isOngoing",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "_schemeId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_schemeAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_timeStarted",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_timeCompleting",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "listSchemes",
    outputs: [
      {
        internalType: "bool[]",
        name: "_schemes",
        type: "bool[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nextSchemeId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "schemes",
    outputs: [
      {
        internalType: "address",
        name: "schemeAddress",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isScheme",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "skipScheme",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_schemeId",
        type: "uint256",
      },
    ],
    name: "startScheme",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506001600055610992806100256000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638657fa791161005b5780638657fa791461010d578063b1f7c7e014610122578063bb52085e14610139578063cd8321c11461018d57600080fd5b806301f66ef41461008d57806351e65d64146100a2578063589de82d146100aa5780635b510dbb146100bd575b600080fd5b6100a061009b366004610817565b610195565b005b6100a0610329565b6100a06100b8366004610830565b61043c565b6100d06100cb366004610830565b6104ec565b60408051951515865260208601949094526001600160a01b03909216928401929092526060830191909152608082015260a0015b60405180910390f35b61011561057b565b6040516101049190610859565b61012b60005481565b604051908152602001610104565b61016e610147366004610817565b6003602052600090815260409020546001600160a01b03811690600160a01b900460ff1682565b604080516001600160a01b039093168352901515602083015201610104565b6100a061062d565b600081815260036020526040902054600160a01b900460ff166101f75760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b21039b1b432b6b29031b437b9b2b760591b60448201526064015b60405180910390fd5b3360009081526002602052604090205460ff16156102575760405162461bcd60e51b815260206004820152601f60248201527f4120736368656d6520697320616c726561647920696e2070726f67726573730060448201526064016101ee565b60008181526003602052604090819020549051636e85940f60e11b81523360048201526001600160a01b039091169063dd0b281e90602401600060405180830381600087803b1580156102a957600080fd5b505af11580156102bd573d6000803e3d6000fd5b505050506102cb338261065c565b6000818152600360209081526040918290205482516001600160a01b0390911681523391810191909152428183015290517f40cb373538b7861d93a435fa219ff941fb43218e6a163f4d76d175ba3c1d8c409181900360600190a150565b3360009081526002602052604090205460ff166103585760405162461bcd60e51b81526004016101ee9061089f565b336000908152600160205260409020600201544210156103b35760405162461bcd60e51b8152602060048201526016602482015275536368656d65206973206e6f7420636f6d706c65746560501b60448201526064016101ee565b336000818152600160209081526040808320548084526003909252918290205491516349d7814960e11b81526004810193909352916001600160a01b03909116906393af029290602401600060405180830381600087803b15801561041757600080fd5b505af115801561042b573d6000803e3d6000fd5b50505050610439338261079a565b50565b600054604080516001600160a01b038416815260208101929092524282820152517f1e674b98e7b5009696cddd1156cc26a69d6577667254d8b810d889d357128d9a9181900360600190a16040805180820182526001600160a01b0380841682526001602080840182815260008054815260039092529481209351845495511515600160a01b026001600160a81b031990961693169290921793909317909155546104e691610804565b60005550565b6001600160a01b038116600090815260026020526040812054819081908190819060ff161561056257505050506001600160a01b03828116600081815260016020818152604080842080548086526003845291852054959094529082905282820154600290930154919550939290921691610572565b5060009350839250829150819050805b91939590929450565b60606000805467ffffffffffffffff811115610599576105996108ce565b6040519080825280602002602001820160405280156105c2578160200160208202803683370190505b50905060005b60005481101561062757600081815260036020526040902054600160a01b900460ff1615610615576001828281518110610604576106046108e4565b911515602092830291909101909101525b8061061f81610910565b9150506105c8565b50919050565b3360009081526002602052604090205460ff166103b35760405162461bcd60e51b81526004016101ee9061089f565b6001600160a01b03821660009081526002602052604090205460ff16156106c55760405162461bcd60e51b815260206004820152601f60248201527f4120736368656d6520697320616c726561647920696e2070726f67726573730060448201526064016101ee565b6001600160a01b038083166000908152600260209081526040808320805460ff191660019081179091553384528083528184208681554291015584835260038252918290205482516303ed69ad60e21b81529251610783949190911692630fb5a6b4926004808301939192829003018186803b15801561074457600080fd5b505afa158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c919061092b565b4290610804565b336000908152600160205260409020600201555050565b3360009081526002602052604090205460ff166107c95760405162461bcd60e51b81526004016101ee9061089f565b506001600160a01b03166000908152600260208181526040808420805460ff1916905533845260019182905283208381559081018390550155565b60006108108284610944565b9392505050565b60006020828403121561082957600080fd5b5035919050565b60006020828403121561084257600080fd5b81356001600160a01b038116811461081057600080fd5b6020808252825182820181905260009190848201906040850190845b81811015610893578351151583529284019291840191600101610875565b50909695505050505050565b6020808252601590820152744e6f20736368656d6520696e2070726f677265737360581b604082015260600190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610924576109246108fa565b5060010190565b60006020828403121561093d57600080fd5b5051919050565b60008219821115610957576109576108fa565b50019056fea26469706673582212209abe6985630c348d7f278fc182b113299827e22289fb2c73348a81c163e09fa164736f6c63430008090033";

type SchemeManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SchemeManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SchemeManager__factory extends ContractFactory {
  constructor(...args: SchemeManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SchemeManager> {
    return super.deploy(overrides || {}) as Promise<SchemeManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SchemeManager {
    return super.attach(address) as SchemeManager;
  }
  override connect(signer: Signer): SchemeManager__factory {
    return super.connect(signer) as SchemeManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SchemeManagerInterface {
    return new utils.Interface(_abi) as SchemeManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SchemeManager {
    return new Contract(address, _abi, signerOrProvider) as SchemeManager;
  }
}
