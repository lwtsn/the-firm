/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ScroungeForSatochis,
  ScroungeForSatochisInterface,
} from "../../../../contracts/schemes/ScroungeForSatoshis.sol/ScroungeForSatochis";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_duration",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_experience",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_chanceOfSuccess",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_baseEarning",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_earningBonus",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "who",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "when",
        type: "uint256",
      },
    ],
    name: "SchemeCompleted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "who",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "when",
        type: "uint256",
      },
    ],
    name: "SchemeStarted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_who",
        type: "address",
      },
    ],
    name: "complete",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "duration",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getScheme",
    outputs: [
      {
        internalType: "uint256",
        name: "_duration",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_who",
        type: "address",
      },
    ],
    name: "start",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516102b93803806102b983398101604081905261002f91610049565b600094909455600192909255600255600455600555610089565b600080600080600060a0868803121561006157600080fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b610221806100986000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630fb5a6b41461005157806393af02921461006d578063dd0b281e14610080578063ff83298a14610093575b600080fd5b61005a60005481565b6040519081526020015b60405180910390f35b61007e61007b36600461011f565b50565b005b61007e61008e36600461011f565b6100a9565b61009b6100fb565b60405161006492919061019c565b7f770ec39a627afda6de8b8d68f80104e297a2cd74a7544ee4f52b4912705c26086100df60408051602081019091526000815290565b82426040516100f0939291906101bd565b60405180910390a150565b6000606060005461011760408051602081019091526000815290565b915091509091565b60006020828403121561013157600080fd5b81356001600160a01b038116811461014857600080fd5b9392505050565b6000815180845260005b8181101561017557602081850181015186830182015201610159565b81811115610187576000602083870101525b50601f01601f19169290920160200192915050565b8281526040602082015260006101b5604083018461014f565b949350505050565b6060815260006101d0606083018661014f565b6001600160a01b03949094166020830152506040015291905056fea2646970667358221220113c7ccf862cc7a9624eb28f9f118815e7b814f510644fbf810b2ed7280bf88c64736f6c63430008090033";

type ScroungeForSatochisConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ScroungeForSatochisConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ScroungeForSatochis__factory extends ContractFactory {
  constructor(...args: ScroungeForSatochisConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _duration: BigNumberish,
    _experience: BigNumberish,
    _chanceOfSuccess: BigNumberish,
    _baseEarning: BigNumberish,
    _earningBonus: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ScroungeForSatochis> {
    return super.deploy(
      _duration,
      _experience,
      _chanceOfSuccess,
      _baseEarning,
      _earningBonus,
      overrides || {}
    ) as Promise<ScroungeForSatochis>;
  }
  override getDeployTransaction(
    _duration: BigNumberish,
    _experience: BigNumberish,
    _chanceOfSuccess: BigNumberish,
    _baseEarning: BigNumberish,
    _earningBonus: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _duration,
      _experience,
      _chanceOfSuccess,
      _baseEarning,
      _earningBonus,
      overrides || {}
    );
  }
  override attach(address: string): ScroungeForSatochis {
    return super.attach(address) as ScroungeForSatochis;
  }
  override connect(signer: Signer): ScroungeForSatochis__factory {
    return super.connect(signer) as ScroungeForSatochis__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ScroungeForSatochisInterface {
    return new utils.Interface(_abi) as ScroungeForSatochisInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ScroungeForSatochis {
    return new Contract(address, _abi, signerOrProvider) as ScroungeForSatochis;
  }
}
